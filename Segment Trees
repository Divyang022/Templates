#include <bits/stdc++.h>
using namespace std;

class SGTree
{
    vector<int>seg;
    
    public:
    
    SGTree(int n)
    {
        seg.resize(4*n+1);
    }
    
   void build(int ind,int low,int high,int arr[])
   {
    if(low==high)
    {
        seg[ind]=arr[low];
        return;
    }
    int mid=(low+high)/2;
    build(2*ind+1,low,mid,arr);
    build(2*ind+2,mid+1,high,arr);
    seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
   }

   int query(int ind,int low,int high,int l,int r)
   {
    //no overlap
    if(r<low || high<l)
    return INT_MAX;
    
    //complete overlap
    if(low>=l && high<=r)
    return seg[ind];
    
    //partial overlap
    int mid=(low+high)/2;
    int left=query(2*ind+1,low,mid,l,r);
    int right=query(2*ind+2,mid+1,high,l,r);
    return min(left,right);
    
   }

    void update(int ind,int low,int high,int i,int l,int r,int val)
   {
    if(low==high)
    {
        seg[ind]=val;
        return;
    }
    int mid=(low+high)/2;
    if(i<=mid)
    update(2*ind+1,low,mid,i,l,r,val);
    else
    update(2*ind+2,mid+1,high,i,l,r,val);
    
    seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    
   }
};


int main()
{
    int arr[]={2,1,9,4,3,7};
    SGTree s1(6);
    
    s1.build(0,0,5,arr);
    cout<<s1.query(0,0,5,1,4);
    return 0;
    
   
}
