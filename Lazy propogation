#include <bits/stdc++.h>

using namespace std;

class ST
{
    public:
    vector<int>seg,lazy;
    
    
    ST(int n)
    {
        seg.resize(4*n);
        lazy.resize(4*n);
    }
    
    void build(int ind,int low,int high,int arr[])
    {
        if(low==high)
        {
          seg[ind]=arr[low];   
          return;
        }
        int mid=(low+high)/2;
        build(2*ind+1,low,mid,arr);
        build(2*ind+2,mid+1,high,arr);
        seg[ind]=seg[2*ind+1]+seg[2*ind+2];
    }
    
    void update(int ind,int low,int high,int l,int r,int val)
    {
        //updates prev rem updated and propogates donwards
        
        if(lazy[ind]!=0)
        {
            seg[ind]+=(high-low+1)*lazy[ind];
            
            if(low!=high)
            {
                lazy[2*ind+1]+=lazy[ind];
                lazy[2*ind+2]+=lazy[ind];
            }
            
            lazy[ind]=0;
        }
        
        //no overlap
        if(r<low || high<l) return;
        
        //complete overlap
        if(low>=l && high<=r)
        {
            seg[ind]+=(high-low+1)*val;
            
            if(low!=high)
            {
                lazy[2*ind+1]+=val;
                lazy[2*ind+2]+=val;
            }
            
            lazy[ind]=0;
            return;
        }
        
        //partial overlap
        int mid=(low+high)/2;
        update(2*ind+1,low,mid,l,r,val);
        update(2*ind+2,mid+1,high,l,r,val);
        seg[ind]=seg[2*ind+1]+seg[2*ind+2];
        
    }
    
    int query(int ind,int low,int high,int l,int r)
    {
        
        //updates prev rem updated and propogates donwards
        
        if(lazy[ind]!=0)
        {
            seg[ind]+=(high-low+1)*lazy[ind];
            
            if(low!=high)
            {
                lazy[2*ind+1]+=lazy[ind];
                lazy[2*ind+2]+=lazy[ind];
            }
            
            lazy[ind]=0;
        }
        
        
        //partial overlap
        if(r<low || high<l) return 0;
        
        //complete overlap
        if(low>=l && high<=r)
        {
            return seg[ind];
        }
        
        //partial overlap
        int mid=(low+high)/2;
        int left=query(2*ind+1,low,mid,l,r);
        int right=query(2*ind+2,mid+1,high,l,r);
        return left+right;
    }
    
};

int main()
{
    int n;
    cin>>n;
    ST st(n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    st.build(0,0,n-1,arr);
    cout<<st.query(0,0,n-1,0,5)<<endl;
    
    st.update(0,0,n-1,2,4,5);
    cout<<st.query(0,0,n-1,0,5)<<endl;
    
    st.update(0,0,n-1,0,2,2);
    cout<<st.query(0,0,n-1,0,5)<<endl;
    return 0;
    
   
    

    return 0;
}
